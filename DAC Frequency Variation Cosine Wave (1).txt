

#include<LPC17xx.h>

int DAC_VAL={1025,1016,997,963,913,857,792,717,640,559,478,398,326,...};  //for angles 0 to 350 with sample size of 10
int i,t=0;
unsigned int m;

void EINT3_IRQHandler(void)
{
		m=LPC_GPIOINT->IO0IntStatR;
	
		m=m&0xF0;
		m=(m>>4);
		t=0;		//Resetting the waveform on each key press

		//Detecting the key pressed and changing frequency of waveform by changing the frequency of samples
		if(m==0x01)
		{
			LPC_GPIOINT->IO0IntClr|=(0x01<<4);
			return;
			
		}
		else if(m==0x02)
		{
			LPC_TIM0->MR0=839;
			LPC_GPIOINT->IO0IntClr|=(0x02<<4);
		}
		else if(m==0x04)
		{
			LPC_TIM0->MR0=419;
			LPC_GPIOINT->IO0IntClr|=(0x04<<4);
		}
		else if(m==0x08)
		{
			LPC_TIM0->MR0=209;
			LPC_GPIOINT->IO0IntClr|=(0x08<<4);
		}
		
}
		
void TIMER0_IRQHandler(void)
{
	
	i=(t/10);
	if(flag==0)
	{
		extract=DAC_VAL[i];
		add=add-extract;
		LPC_DAC->DACR=(add<<6);
		if(LPC_DAC->DACR<93)
			flag=1;
	}
	else if(flag==1)
	{
		extract=DAC_VAL[n-i];
		add=extract;
		LPC_DAC->DACR=(add<<6);
		if(LPC_DAC->DACR>1025)
			flag=0;
	}
	t=t+10;
	if(t==360)
		t=0;
	LPC_TIM0->IR=1;
}

int main(void)
{
	SystemInit();
	SystemCoreClockUpdate();
	
	LPC_PINCON->PINSEL0=0;
	LPC_GPIOINT=IO0IntEnR=(0xF<<4); //Configuring P0.4 to P0.7 as GPIO Interrupts with Keyboard Interfacing 
	LPC_PINCON->PINSEL1=(2<<20);  //DAC Output
	
	
	LPC_TIM0->CTCR=0;
	LPC_TIM0->MCR=0X03;
	LPC_TIM0->MR0=1679; //Default Frequency 0.5kHz
	LPC_TIM0->TCR=0X01; 
	
	NVIC_EnableIRQ(EINT3_IRQn);
	NVIC_EnableIRQ(TIMER0_IRQn);
	
	while(1);
	
}
